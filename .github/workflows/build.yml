name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            rust_target_amd64: x86_64-unknown-linux-gnu
            rust_target_arm64: aarch64-unknown-linux-gnu
            artifact_prefix: linux
          - os: macos-latest
            rust_target_amd64: x86_64-apple-darwin
            rust_target_arm64: aarch64-apple-darwin
            artifact_prefix: macos
        exclude:
          # Exclude arm64 build on Ubuntu runner as it requires more setup
          - os: ubuntu-latest
            arch: arm64
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm-dev libclang-dev

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.arch == 'amd64' && matrix.rust_target_amd64 || matrix.rust_target_arm64 }}
          # The toolchain is defined in rust-toolchain.toml

      - name: Setup cross-compilation for ARM64 (macOS)
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Create .env file
        run: cp .env_example .env

      - name: Install hoonc
        run: make install-hoonc

      - name: Build binaries
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            # For macOS ARM64, we need a special build approach
            CARGO_BUILD_TARGET=aarch64-apple-darwin make build
          else
            make build
          fi

      - name: Prepare binaries for upload
        run: |
          mkdir -p artifacts
          
          if [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            cp target/aarch64-apple-darwin/release/nockchain artifacts/nockchain
            cp target/aarch64-apple-darwin/release/nockchain-wallet artifacts/nockchain-wallet
          else
            cp target/release/nockchain artifacts/nockchain
            cp target/release/nockchain-wallet artifacts/nockchain-wallet
          fi
          
          cp -r assets artifacts/
          
          ARTIFACT_NAME="${{ matrix.artifact_prefix }}-${{ matrix.arch }}"
          cd artifacts
          tar -czf "../${ARTIFACT_NAME}.tar.gz" .
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_prefix }}-${{ matrix.arch }}
          path: ${{ matrix.artifact_prefix }}-${{ matrix.arch }}.tar.gz
          retention-days: 7

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/linux-amd64/linux-amd64.tar.gz
            artifacts/macos-amd64/macos-amd64.tar.gz
            artifacts/macos-arm64/macos-arm64.tar.gz
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }} 
